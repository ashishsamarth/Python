--------------------------------------------------------------------------------------------------------------------------------------------------------------
Python keywords are unique words reserved with defined meanings and functions that we can only apply for those functions
You dont need to import any keyword into your program because they're permanently present.

However Python built in methods and classes are different. Built-in methods and classes are constantly present.

Assigning a particular meaning to Python keywords means you can't use them for other purposes in our code. 
You'll get a message of SyntaxError if you attempt to do the same

If you attempt to assign anything to a built-in method or type, you will not receive a SyntaxError message

--------------------------------------------------------------------------------------------------------------------------------------------------------------
Python contains the following keywords
--------------------------------------------------------------------------------------------------------------------------------------------------------------
False	await	    else	    import	    pass
None	break	    except	    in	        raise
True	class	    finally	    is	        return
and	    continue	for	        lambda	    try
as	    def	        from	    nonlocal	while
assert	del	        global	    not	        with
async	elif	    if	        or	        yield

--------------------------------------------------------------------------------------------------------------------------------------------------------------
To get the complete list of python keywords, you can use the following library

# -*- coding: utf-8 -*-
"""
Created on Fri Jan 27 13:29:45 2023

@author: Ashish Samarth
"""

# import keyword library
import keyword

# run dir() {python3 built-in} function on the libray
# to get a list of attributes and methods
print(f'Here is the complete list of attribues and methods of keyword library \n\n {dir(keyword)}')
print('-'*60)

# To get the list of all keywords in python 3
print(f'Here is the current list of reserved keywords: \n\n{keyword.kwlist}')

# Output
'''
Here is the complete list of attribues and methods of keyword library 

 ['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'iskeyword', 'kwlist', 'main']
------------------------------------------------------------
Here is the current list of reserved keywords: 

['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 
'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

'''

--------------------------------------------------------------------------------------------------------------------------------------------------------------
Value Keywords: True, False, None
--------------------------------------------------------------------------------------------------------------------------------------------------------------
**********************
Note: True is 1 and False is 0
e.g.

print( 4 == 4 )             :   True
print( 6 > 9 )              :   False
print( True or False )      :   True    (Based on the OR condition)
print( 9 <= 28 )            :   True    (Based on the OR condition)
print( 6 > 9 )              :   False
print( True and False )     :   False   (Based on the AND condition)

**********************
None is a Python keyword that means "nothing." 
None is known as nil, null, or undefined in different computer languages

Note: If a function does not have a return value, It will give None as the default output.
e.g.

print( None == 0 )          :   False
print( None == " " )        :   False
print( None == False )      :   False

A = B = None
print( A == B )             :   True

--------------------------------------------------------------------------------------------------------------------------------------------------------------
Operator Keywords: and, or, not, in, is
--------------------------------------------------------------------------------------------------------------------------------------------------------------
**********************
AND Keyword

Truth Table for 'AND'

X	    Y	        X and Y
True----True	    True
False---True	    False
True----False	    False
False---False	    False

**********************
OR Keyword

Truth Table for 'OR'

X	    Y	        X or Y
True----True	    True
True----False	    True
False---True	    True
False---False	    False

**********************
NOT Keyword

Truth Table for 'NOT'

X	        not X
True	    False
False	    True

**********************
IN Keyword

The in keyword of Python is a robust confinement checker, also known as a membership operator.
If you provide it an element to seek and a container or series to seek into, it will give True or False, depending on if that given element was located in the 
given container

# -*- coding: utf-8 -*-
"""
Created on Fri Jan 27 13:57:07 2023

@author: Ashish Samarth
"""

# Define a variable to have a string
_my_spyder_var = 'Python is awesome'

# Checking membership using 'in' operator for lowercase 'p'
print(f"Is p present in the string :-  {'p' in _my_spyder_var}")

# Checking membership using 'in' operator for lowercase 'P'
print(f"Is P present in the string :-  {'P' in _my_spyder_var}")

'''
# Output

Is p present in the string :-  False
Is P present in the string :-  True
'''

**********************
IS Keyword

The 'is' keyword is used to check the identification of objects. The '==' operation is used to determin where two arguments are identical.
The 'is' keyword determines where two arguments related to the unique object.
When the objects are the same, it results in True, else a False.

e.g.

print( True is True )           : #Output   True
print( False is True )          : #Output   False
print( None is not None )       : #Output   False
print( (9 + 5) is (7 * 2) )     : #Output   True


print( [] == [] )               : #Output   True
print( [] is [] )               : #Output   False
print( {} == {} )               : #Output   True
print( {} is {} )               : #Output   False
print( set() == set()  )        : #Output   True
print( set() is set()  )        : #Output   False

A blank dictionary or list or set is the same as another blank one. However, they aren't identical entities because they are stored independently in memory. 
This is because both the list, set and the dictionary are changeable

print( '' == '' )  
print( '' is '' )  
print( () == () )  
print( () is () )  
print( frozenset() == frozenset())
print( frozenset() is frozenset())

A blank string or tuple or frozenset is same as the another one and also they are identical because these are not mutable.

A = 'a'
B = 'a'
print(A == B)                   : #Output   True
print(A is B)                   : #Output   True

A = B ='a'
print(A == B)                   : #Output   True
print(A is B)                   : #Output   True