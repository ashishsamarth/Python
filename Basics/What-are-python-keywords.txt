--------------------------------------------------------------------------------------------------------------------------------------------------------------
Python keywords are unique words reserved with defined meanings and functions that we can only apply for those functions
You dont need to import any keyword into your program because they're permanently present.

However Python built in methods and classes are different. Built-in methods and classes are constantly present.

Assigning a particular meaning to Python keywords means you can't use them for other purposes in our code. 
You'll get a message of SyntaxError if you attempt to do the same

If you attempt to assign anything to a built-in method or type, you will not receive a SyntaxError message

--------------------------------------------------------------------------------------------------------------------------------------------------------------
Python contains the following keywords
--------------------------------------------------------------------------------------------------------------------------------------------------------------
False	await	    else	    import	    pass
None	break	    except	    in	        raise
True	class	    finally	    is	        return
and	    continue	for	        lambda	    try
as	    def	        from	    nonlocal	while
assert	del	        global	    not	        with
async	elif	    if	        or	        yield

--------------------------------------------------------------------------------------------------------------------------------------------------------------
To get the complete list of python keywords, you can use the following library

# -*- coding: utf-8 -*-
"""
Created on Fri Jan 27 13:29:45 2023

@author: Ashish Samarth
"""

# import keyword library
import keyword

# run dir() {python3 built-in} function on the libray
# to get a list of attributes and methods
print(f'Here is the complete list of attribues and methods of keyword library \n\n {dir(keyword)}')
print('-'*60)

# To get the list of all keywords in python 3
print(f'Here is the current list of reserved keywords: \n\n{keyword.kwlist}')

# Output
'''
Here is the complete list of attribues and methods of keyword library 

 ['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'iskeyword', 'kwlist', 'main']
------------------------------------------------------------
Here is the current list of reserved keywords: 

['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 
'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

'''

--------------------------------------------------------------------------------------------------------------------------------------------------------------
Value Keywords: True, False, None
--------------------------------------------------------------------------------------------------------------------------------------------------------------
**********************
Note: True is 1 and False is 0
e.g.

print( 4 == 4 )             :   True
print( 6 > 9 )              :   False
print( True or False )      :   True    (Based on the OR condition)
print( 9 <= 28 )            :   True    (Based on the OR condition)
print( 6 > 9 )              :   False
print( True and False )     :   False   (Based on the AND condition)

**********************
None is a Python keyword that means "nothing." 
None is known as nil, null, or undefined in different computer languages

Note: If a function does not have a return value, It will give None as the default output.
e.g.

print( None == 0 )          :   False
print( None == " " )        :   False
print( None == False )      :   False

A = B = None
print( A == B )             :   True

--------------------------------------------------------------------------------------------------------------------------------------------------------------
Operator Keywords: and, or, not, in, is
--------------------------------------------------------------------------------------------------------------------------------------------------------------
**********************
AND Keyword

Truth Table for 'AND'

X	    Y	        X and Y
True----True	    True
False---True	    False
True----False	    False
False---False	    False

**********************
OR Keyword

Truth Table for 'OR'

X	    Y	        X or Y
True----True	    True
True----False	    True
False---True	    True
False---False	    False

**********************
NOT Keyword

Truth Table for 'NOT'

X	        not X
True	    False
False	    True

**********************
IN Keyword

The in keyword of Python is a robust confinement checker, also known as a membership operator.
If you provide it an element to seek and a container or series to seek into, it will give True or False, depending on if that given element was located in the 
given container

# -*- coding: utf-8 -*-
"""
Created on Fri Jan 27 13:57:07 2023

@author: Ashish Samarth
"""

# Define a variable to have a string
_my_spyder_var = 'Python is awesome'

# Checking membership using 'in' operator for lowercase 'p'
print(f"Is p present in the string :-  {'p' in _my_spyder_var}")

# Checking membership using 'in' operator for lowercase 'P'
print(f"Is P present in the string :-  {'P' in _my_spyder_var}")

'''
# Output

Is p present in the string :-  False
Is P present in the string :-  True
'''

**********************
IS Keyword

The 'is' keyword is used to check the identification of objects. The '==' operation is used to determin where two arguments are identical.
The 'is' keyword determines where two arguments related to the unique object.
When the objects are the same, it results in True, else a False.

e.g.

print( True is True )           : #Output   True
print( False is True )          : #Output   False
print( None is not None )       : #Output   False
print( (9 + 5) is (7 * 2) )     : #Output   True


print( [] == [] )               : #Output   True
print( [] is [] )               : #Output   False
print( {} == {} )               : #Output   True
print( {} is {} )               : #Output   False
print( set() == set()  )        : #Output   True
print( set() is set()  )        : #Output   False

A blank dictionary or list or set is the same as another blank one. However, they aren't identical entities because they are stored independently in memory. 
This is because both the list, set and the dictionary are changeable

print( '' == '' )  
print( '' is '' )  
print( () == () )  
print( () is () )  
print( frozenset() == frozenset())
print( frozenset() is frozenset())

A blank string or tuple or frozenset is same as the another one and also they are identical because these are not mutable.

A = 'a'
B = 'a'
print(A == B)                   : #Output   True
print(A is B)                   : #Output   True

A = B ='a'
print(A == B)                   : #Output   True
print(A is B)                   : #Output   True


--------------------------------------------------------------------------------------------------------------------------------------------------------------
nonlocal keyword
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Nonlocal keyword usage is fairly analogous to global keyword usage. 
The keyword nonlocal is designed to indicate that a variable within a function that is inside a function, i.e., a nested function is just not local to it, 
implying that it is located in the outer function. 
We must define a non-local parameter with nonlocal if we ever need to change its value under a nested function. Otherwise, the nested function creates a local 
variable using that title

e.g.

# -*- coding: utf-8 -*-
"""
Created on Fri Jan 27 14:18:09 2023

@author: Ashish Samarth
"""
# Display usage of nonlocal keyword

# Create a function
def the_outer_function():
    # Define a local variable
    var = 10  
    # Create another function inside the outer function
    def the_inner_function():  
        # Define a new variable with keyword - nonlocal
        nonlocal var  
        var = 14  
        print("The value inside the inner function: ", var)
    
    # Call the inner function
    the_inner_function()  
    print("The value inside the outer function: ", var)  

# call the outher function
the_outer_function()  

'''
# Output
The value inside the inner function:  14
The value inside the outer function:  14

'''

the_inner_function() is placed inside the_outer_function in this case.
Var is not a global variable.As a result, if we wish to change it inside the the_inner_function(), we should declare it using nonlocal
As a result, the variable was effectively updated within the nested the_inner_function

Now see the variation without the nonlocal keyword

# -*- coding: utf-8 -*-
"""
Created on Fri Jan 27 14:22:07 2023

@author: Ashish Samarth
"""

# Display usage without nonlocal keyword
def the_outer_function():
    # Define a local variable
    var = 10  
    # Create another function inside the outer function
    def the_inner_function():
        # Define a new variable with in the inner function
        var = 14  
        print("Value inside the inner function: ", var)  
     # Call the inner function
    the_inner_function()  
    print("Value inside the outer function: ", var)  
# call the outher function  
the_outer_function()  

'''
# Output
Value inside the inner function:  14
Value inside the outer function:  10
'''

--------------------------------------------------------------------------------------------------------------------------------------------------------------
Iteration Keywords: for, while, break, continue
--------------------------------------------------------------------------------------------------------------------------------------------------------------
The iterative process and looping are essential programming fundamentals. To generate and operate with loops, Python has multiple keywords. These would be 
utilized and observed in almost every Python program.

**********************
FOR Keyword

The for loop is by far the most popular loop in Python. It's built by blending two Python keywords. They are for and in

e.g.
for i in range(15):
    print( i + 4, end = " ") 

'''
#Output
4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
'''

**********************
WHILE Keyword
Python's while loop employs the term while and functions similarly to other computer languages' while loops. 
The code block after the while phrase will be repeated until the condition following the while keyword is false.

e.g.
# looping from 1 to 15  
i = 0 # initial condition  
while i < 15:  
        
    # When i has value 9, loop will jump to next iteration using continue. It will not print  
    if i == 9:  
        i += 3
    else:  
        # when i is not equal to 9, adding 2 and printing the value  
        print( i + 2, end = " ")  
            
    i += 1

'''
# Output
2 3 4 5 6 7 8 9 10 15 16 
'''

**********************
BREAK Keyword
If you want to quickly break out of a loop, employ the break keyword. We can use this keyword in both for and while loops.

e.g.

for i in range(15):   
    print( i + 4, end = " ")     
    # breaking the loop when i = 9  
    if i == 9:  
        break     
print()

'''
# Output
4 5 6 7 8 9 10 11 12 13
'''

**********************
CONTINUE Keyword
 The continue keyword, enables you to quit performing the present loop iteration and go on to the subsequent one

 e.g.
# looping from 1 to 15  
i = 0 # initial condition  
while i < 15:  
        
    # When i has value 9, loop will jump to next iteration using continue. It will not print  
    if i == 9:  
        i += 3  
        continue  
    else:  
        # when i is not equal to 9, adding 2 and printing the value  
        print( i + 2, end = " ")  
            
    i += 1

'''
# Output
2 3 4 5 6 7 8 9 10 14 15 16
''' 